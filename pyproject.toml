# File: rust_indicators/pyproject.toml
[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "rust_indicators"
version = "0.1.1"
description = "High-performance technical analysis indicators for FreqTrade with optional GPU acceleration"
authors = [{name = "Taoist Quant", email = "quant@example.com"}]
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.21.0",
]
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Office/Business :: Financial",
    "Intended Audience :: Financial and Insurance Industry",
    "Development Status :: 4 - Beta",
]
keywords = ["technical-analysis", "indicators", "trading", "freqtrade", "gpu", "cuda", "performance"]
readme = "README.md"

[tool.maturin]
features = ["pyo3/extension-module"]

# Optional dependencies for different acceleration backends
[project.optional-dependencies]
# GPU support via WebGPU - no Python dependencies required
# GPU acceleration is handled entirely by the Rust backend using cubecl/wgpu
gpu = []

# CUDA support - requires GPU feature and adds CUDA-specific acceleration
# CUDA acceleration is handled entirely by the Rust backend using cubecl/cuda
cuda = []

# Development dependencies
dev = [
    "pytest>=6.0",
    "pytest-benchmark>=3.4.0",
    "ruff>=0.13.0",
]

analysis = [
    "pandas>=2.3.2",
    "ipykernel>=6.30.1",
    "plotly>=6.3.0",
    "pycoingecko>=3.2.0",
    "nbformat>=4.2.0",
    "scikit-learn>=1.7.2",
    "scipy>=1.16.2"
]

# Feature activation via environment variables during build:
# For GPU support:  MATURIN_FEATURES="gpu" pip install .
# For CUDA support: MATURIN_FEATURES="cuda" pip install .
#
# Or install with optional dependencies:
# pip install rust_indicators[gpu]    # WebGPU acceleration
# pip install rust_indicators[cuda]   # CUDA acceleration (includes GPU)